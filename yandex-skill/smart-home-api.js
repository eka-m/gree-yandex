import express from 'express'
import fetch from 'node-fetch'
import { authenticateToken } from './oauth.js'
import dgram from 'dgram'
import { exec } from 'child_process'

const app = express()
app.use(express.json())

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Provider IOT API
const PROVIDER_IOT_API = {
  base_url: process.env.HVAC_SERVER_URL || 'http://localhost:3001',
  endpoints: {
    status: '/api/status',
    command: '/api/command',
    connect: '/api/connect',
    disconnect: '/api/disconnect',
    scan: '/api/scan-hvac'
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userDevices = new Map()

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É–º–Ω–æ–≥–æ –¥–æ–º–∞
function logRequest(req, res, next) {
  const requestId = req.headers['x-request-id'] || 'unknown'
  const timestamp = new Date().toISOString()
  const userAgent = req.headers['user-agent'] || 'unknown'
  
  console.log(`üìù [${timestamp}] [${requestId}] ${req.method} ${req.path}`)
  console.log(`üìù [${timestamp}] [${requestId}] User-Agent: ${userAgent}`)
  console.log(`üìù [${timestamp}] [${requestId}] Headers:`, {
    'authorization': req.headers.authorization ? 'Bearer ***' : 'none',
    'content-type': req.headers['content-type'],
    'x-request-id': requestId
  })
  
  if (req.body && Object.keys(req.body).length > 0) {
    console.log(`üìù [${timestamp}] [${requestId}] Body:`, JSON.stringify(req.body, null, 2))
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º requestId –≤ response headers –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  res.setHeader('X-Request-Id', requestId)
  
  next()
}

app.use(logRequest)

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏
async function discoverHVACDevices(userId) {
  console.log(`üîç [${userId}] –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤...`)
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–µ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const gatewayIp = await new Promise((resolve, reject) => {
      exec('netstat -nr | grep default | head -1 | awk \'{print $2}\'', (error, stdout, stderr) => {
        if (error) {
          console.error(`exec error: ${error}`)
          return reject(error)
        }
        resolve(stdout.trim())
      })
    })
    
    if (!gatewayIp) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞')
    }
    
    const baseIP = gatewayIp.substring(0, gatewayIp.lastIndexOf('.') + 1)
    console.log(`üîç [${userId}] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–¥—Å–µ—Ç—å: ${baseIP}0/24`)
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å —á–µ—Ä–µ–∑ Provider IOT API
    const response = await fetch(`${PROVIDER_IOT_API.base_url}${PROVIDER_IOT_API.endpoints.scan}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ subnet: baseIP })
    })
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${response.status}`)
    }
    
    const scanResult = await response.json()
    console.log(`üîç [${userId}] –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${scanResult.devices?.length || 0}`)
    
    return scanResult.devices || []
    
  } catch (error) {
    console.error(`‚ùå [${userId}] –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:`, error.message)
    return []
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤
function createDevicesFromHVAC(hvacDevices, userId) {
  const devices = []
  
  hvacDevices.forEach((hvac, index) => {
    devices.push({
      id: `gree-ac-${userId}-${index + 1}`,
      name: `–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä Gree ${index + 1}`,
      type: 'devices.types.thermostat.ac',
      room: index === 0 ? '–ì–æ—Å—Ç–∏–Ω–∞—è' : `–ö–æ–º–Ω–∞—Ç–∞ ${index + 1}`,
      hvac_info: {
        ip: hvac.ip,
        port: hvac.port
      },
      capabilities: [
        {
          type: 'devices.capabilities.on_off',
          retrievable: true,
          parameters: {
            split: false
          }
        },
        {
          type: 'devices.capabilities.range',
          retrievable: true,
          parameters: {
            instance: 'temperature',
            unit: 'unit.temperature.celsius',
            range: {
              min: 16,
              max: 30,
              precision: 1
            }
          }
        },
        {
          type: 'devices.capabilities.mode',
          retrievable: true,
          parameters: {
            instance: 'thermostat',
            modes: [
              { value: 'auto' },
              { value: 'cool' },
              { value: 'heat' },
              { value: 'dry' },
              { value: 'fan_only' }
            ]
          }
        },
        {
          type: 'devices.capabilities.mode',
          retrievable: true,
          parameters: {
            instance: 'fan_speed',
            modes: [
              { value: 'auto' },
              { value: 'low' },
              { value: 'medium' },
              { value: 'high' }
            ]
          }
        },
        {
          type: 'devices.capabilities.toggle',
          retrievable: true,
          parameters: {
            instance: 'lights'
          }
        },
        {
          type: 'devices.capabilities.toggle',
          retrievable: true,
          parameters: {
            instance: 'swing'
          }
        }
      ],
      properties: [
        {
          type: 'devices.properties.float',
          retrievable: true,
          parameters: {
            instance: 'temperature',
            unit: 'unit.temperature.celsius'
          }
        }
      ]
    })
  })
  
  return devices
}

// 0. Health check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Endpoint URL
app.head('/v1.0/', (req, res) => {
  const requestId = req.headers['x-request-id']
  
  console.log(`‚ù§Ô∏è [${requestId}] Health Check (HEAD)`)
  
  res.status(200).end()
})

// 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Device Discovery)
app.get('/v1.0/user/devices', authenticateToken, async (req, res) => {
  const requestId = req.headers['x-request-id']
  const userId = req.user.id
  
  console.log(`üìã [${requestId}] Device Discovery: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
  
  try {
    let devices = userDevices.get(userId)
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
    if (!devices || devices.length === 0) {
      console.log(`üîç [${requestId}] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ...`)
      
      const hvacDevices = await discoverHVACDevices(userId)
      
      if (hvacDevices.length > 0) {
        devices = createDevicesFromHVAC(hvacDevices, userId)
        userDevices.set(userId, devices)
        console.log(`‚úÖ [${requestId}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
      } else {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        devices = [{
          id: `gree-ac-${userId}-1`,
          name: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä Gree',
          type: 'devices.types.thermostat.ac',
          room: '–ì–æ—Å—Ç–∏–Ω–∞—è',
          capabilities: [
            {
              type: 'devices.capabilities.on_off',
              retrievable: true,
              parameters: {
                split: false
              }
            },
            {
              type: 'devices.capabilities.range',
              retrievable: true,
              parameters: {
                instance: 'temperature',
                unit: 'unit.temperature.celsius',
                range: {
                  min: 16,
                  max: 30,
                  precision: 1
                }
              }
            },
            {
              type: 'devices.capabilities.mode',
              retrievable: true,
              parameters: {
                instance: 'thermostat',
                modes: [
                  { value: 'auto' },
                  { value: 'cool' },
                  { value: 'heat' },
                  { value: 'dry' },
                  { value: 'fan_only' }
                ]
              }
            },
            {
              type: 'devices.capabilities.mode',
              retrievable: true,
              parameters: {
                instance: 'fan_speed',
                modes: [
                  { value: 'auto' },
                  { value: 'low' },
                  { value: 'medium' },
                  { value: 'high' }
                ]
              }
            },
            {
              type: 'devices.capabilities.toggle',
              retrievable: true,
              parameters: {
                instance: 'lights'
              }
            },
            {
              type: 'devices.capabilities.toggle',
              retrievable: true,
              parameters: {
                instance: 'swing'
              }
            }
          ],
          properties: [
            {
              type: 'devices.properties.float',
              retrievable: true,
              parameters: {
                instance: 'temperature',
                unit: 'unit.temperature.celsius'
              }
            }
          ]
        }]
        userDevices.set(userId, devices)
        console.log(`‚ö†Ô∏è [${requestId}] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
      }
    }
    
    const response = {
      request_id: req.query.request_id || requestId,
      payload: {
        user_id: userId,
        devices: devices
      }
    }
    
    console.log(`‚úÖ [${requestId}] Device Discovery: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`)
    
    res.json(response)
    
  } catch (error) {
    console.error(`‚ùå [${requestId}] Device Discovery: –û—à–∏–±–∫–∞`, error)
    res.status(500).json({
      request_id: req.query.request_id || requestId,
      error_code: 'INTERNAL_ERROR',
      error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})

// 2. –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Device Status)
app.post('/v1.0/user/devices/query', authenticateToken, async (req, res) => {
  const requestId = req.headers['x-request-id']
  const { devices } = req.body
  
  console.log(`üîç [${requestId}] Device Status: –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:`, devices.map(d => d.id))
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç Provider IOT API
    const hvacStatus = await getProviderIOTStatus()
    
    const devices_response = devices.map(device => {
      const userDevicesList = userDevices.get(req.user.id) || []
      const deviceConfig = userDevicesList.find(d => d.id === device.id)
      
      if (!deviceConfig) {
        return {
          id: device.id,
          error_code: 'DEVICE_NOT_FOUND',
          error_message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        }
      }
      
      return {
        id: device.id,
        capabilities: [
          {
            type: 'devices.capabilities.on_off',
            state: {
              instance: 'on',
              value: hvacStatus.power === 'on'
            }
          },
          {
            type: 'devices.capabilities.range',
            state: {
              instance: 'temperature',
              value: hvacStatus.temperature
            }
          },
          {
            type: 'devices.capabilities.mode',
            state: {
              instance: 'thermostat',
              value: hvacStatus.mode
            }
          },
          {
            type: 'devices.capabilities.mode',
            state: {
              instance: 'fan_speed',
              value: hvacStatus.fanSpeed
            }
          },
          {
            type: 'devices.capabilities.toggle',
            state: {
              instance: 'lights',
              value: hvacStatus.lights === 'on'
            }
          },
          {
            type: 'devices.capabilities.toggle',
            state: {
              instance: 'swing',
              value: hvacStatus.swingVert !== 'default'
            }
          }
        ],
        properties: [
          {
            type: 'devices.properties.float',
            state: {
              instance: 'temperature',
              value: hvacStatus.currentTemperature
            }
          }
        ]
      }
    })
    
    console.log(`‚úÖ [${requestId}] Device Status: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—É—á–µ–Ω–æ`)
    
    res.json({
      request_id: req.body.request_id,
      payload: {
        devices: devices_response
      }
    })
    
  } catch (error) {
    console.error(`‚ùå [${requestId}] Device Status: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, error)
    res.status(500).json({
      request_id: req.body.request_id,
      error_code: 'INTERNAL_ERROR',
      error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})

// 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ (Device Control)
app.post('/v1.0/user/devices/action', authenticateToken, async (req, res) => {
  const requestId = req.headers['x-request-id']
  const { payload } = req.body
  
  console.log(`üéõÔ∏è [${requestId}] Device Control: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:`, JSON.stringify(payload, null, 2))
  
  try {
    const results = []
    
    for (const device of payload.devices) {
      const deviceResults = []
      
      for (const capability of device.capabilities) {
        try {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –∫–æ–º–∞–Ω–¥—É Provider IOT API
          await executeCapabilityThroughIOT(capability, device.id, req.user.id)
          
          deviceResults.push({
            type: capability.type,
            state: {
              instance: capability.state.instance,
              action_result: {
                status: 'DONE'
              }
            }
          })
          
          console.log(`‚úÖ [${requestId}] Device Control: –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${capability.type} ${capability.state.instance}`)
          
        } catch (error) {
          console.error(`‚ùå [${requestId}] Device Control: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:`, error)
          
          deviceResults.push({
            type: capability.type,
            state: {
              instance: capability.state.instance,
              action_result: {
                status: 'ERROR',
                error_code: 'INTERNAL_ERROR',
                error_message: error.message
              }
            }
          })
        }
      }
      
      results.push({
        id: device.id,
        capabilities: deviceResults
      })
    }
    
    console.log(`‚úÖ [${requestId}] Device Control: –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã`)
    
    res.json({
      request_id: req.body.request_id,
      payload: {
        devices: results
      }
    })
    
  } catch (error) {
    console.error(`‚ùå [${requestId}] Device Control: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:`, error)
    res.status(500).json({
      request_id: req.body.request_id,
      error_code: 'INTERNAL_ERROR',
      error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})

// 4. –†–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (Account Unlinking)
app.post('/v1.0/user/unlink', authenticateToken, (req, res) => {
  const requestId = req.headers['x-request-id']
  const userId = req.user.id
  
  console.log(`üîó [${requestId}] Account Unlink: –†–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
  
  try {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userDevices.delete(userId)
    
    console.log(`‚úÖ [${requestId}] Account Unlink: –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—ä–µ–¥–∏–Ω–µ–Ω`)
    
    res.json({
      request_id: req.body?.request_id || requestId,
      status: 'ok'
    })
    
  } catch (error) {
    console.error(`‚ùå [${requestId}] Account Unlink: –û—à–∏–±–∫–∞ —Ä–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–∏—è`, error)
    res.status(500).json({
      request_id: req.body?.request_id || requestId,
      error_code: 'INTERNAL_ERROR',
      error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})

// 5. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –∫–æ–º–∞–Ω–¥—É Provider IOT API
async function executeCapabilityThroughIOT(capability, deviceId, userId) {
  const { type, state } = capability
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  const userDevicesList = userDevices.get(userId) || []
  const deviceConfig = userDevicesList.find(d => d.id === deviceId)
  
  if (!deviceConfig) {
    throw new Error(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
  }
  
  // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –∫–æ–º–∞–Ω–¥—ã Provider IOT API
  const commandMapping = {
    'devices.capabilities.on_off': {
      property: 'power',
      value: state.value ? 'on' : 'off'
    },
    'devices.capabilities.range': {
      property: 'temperature',
      value: state.value
    },
    'devices.capabilities.mode': {
      property: state.instance === 'thermostat' ? 'mode' : 'fanSpeed',
      value: state.value
    },
    'devices.capabilities.toggle': {
      property: state.instance === 'lights' ? 'lights' : 'swingVert',
      value: state.value ? (state.instance === 'lights' ? 'on' : 'full') : (state.instance === 'lights' ? 'off' : 'default')
    }
  }
  
  const command = commandMapping[type]
  
  if (!command) {
    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø capability: ${type}`)
  }
  
  // –ï—Å–ª–∏ —É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ HVAC, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–º—É
  if (deviceConfig.hvac_info) {
    await connectToHVAC(deviceConfig.hvac_info)
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Provider IOT API
  await sendCommandToProviderIOT(command.property, command.value)
}

// 6. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É
async function connectToHVAC(hvacInfo) {
  const response = await fetch(`${PROVIDER_IOT_API.base_url}${PROVIDER_IOT_API.endpoints.connect}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ 
      host: `${hvacInfo.ip}:${hvacInfo.port}` 
    })
  })
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É ${hvacInfo.ip}:${hvacInfo.port}`)
  }
  
  console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É ${hvacInfo.ip}:${hvacInfo.port}`)
}

// 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ Provider IOT API
async function sendCommandToProviderIOT(property, value) {
  const url = `${PROVIDER_IOT_API.base_url}${PROVIDER_IOT_API.endpoints.command}`
  
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ property, value })
  })
  
  if (!response.ok) {
    const error = await response.text()
    throw new Error(`Provider IOT API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${error}`)
  }
  
  const result = await response.json()
  console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Provider IOT API: ${property} = ${value}`)
  return result
}

// 8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç Provider IOT API
async function getProviderIOTStatus() {
  const url = `${PROVIDER_IOT_API.base_url}${PROVIDER_IOT_API.endpoints.status}`
  
  const response = await fetch(url)
  
  if (!response.ok) {
    throw new Error(`Provider IOT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`)
  }
  
  const data = await response.json()
  return data.deviceStatus
}

// 9. Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.get('/health', (req, res) => {
  const requestId = req.headers['x-request-id']
  
  console.log(`‚ù§Ô∏è [${requestId}] Health Check`)
  
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    provider: 'Gree HVAC',
    iot_api_status: 'connected',
    auto_discovery: 'enabled'
  })
})

// 10. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  const requestId = req.headers['x-request-id']
  console.error(`‚ùå [${requestId}] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:`, error)
  
  res.status(500).json({
    request_id: req.body?.request_id || requestId,
    error_code: 'INTERNAL_ERROR',
    error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  })
})

export default app 