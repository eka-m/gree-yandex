import express from 'express'
import { createServer } from 'http'
import { Server } from 'socket.io'
import cors from 'cors'
import Gree from 'gree-hvac-client'

const app = express()
const server = createServer(app)
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
})

app.use(cors())
app.use(express.json())

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å IP –∞–¥—Ä–µ—Å)
const HVAC_CONFIG = {
  host: process.env.HVAC_HOST || '192.168.31.8', // IP –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞
  port: 7000,
  autoConnect: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  poll: true,
  pollingInterval: 3000
}

let hvacClient = null
let deviceStatus = {
  power: 'off',
  mode: 'cool',
  temperature: 25,
  currentTemperature: 0,
  fanSpeed: 'auto',
  swingHor: 'default',
  swingVert: 'default',
  lights: 'off',
  health: 'off',
  sleep: 'off',
  turbo: 'off',
  quiet: 'off',
  blow: 'off',
  air: 'off',
  powerSave: 'off'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞
function createHVACClient() {
  try {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞...')
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
    if (hvacClient) {
      try {
        hvacClient.disconnect()
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', error.message)
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç –∏–∑ host –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    if (HVAC_CONFIG.host.includes(':')) {
      const [host, port] = HVAC_CONFIG.host.split(':')
      HVAC_CONFIG.host = host
      HVAC_CONFIG.port = parseInt(port) || 7000
    }
    
    console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É: ${HVAC_CONFIG.host}:${HVAC_CONFIG.port}`)
    
    hvacClient = new Gree.Client(HVAC_CONFIG)
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É
    hvacClient.connect().then(() => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É')
      io.emit('connection_status', 'connected')
    }).catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
      io.emit('connection_status', 'error')
    })
    
    hvacClient.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É')
      io.emit('connection_status', 'connected')
    })

    hvacClient.on('disconnect', () => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞')
      io.emit('connection_status', 'disconnected')
    })

    hvacClient.on('update', (updatedProperties, properties) => {
      console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', updatedProperties)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      Object.assign(deviceStatus, properties)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      io.emit('device_update', properties)
    })

    hvacClient.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞:', error.message)
      io.emit('connection_status', 'error')
    })

    hvacClient.on('no_response', () => {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞')
      io.emit('connection_status', 'error')
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error.message)
    io.emit('connection_status', 'error')
  }
}

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id)
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  socket.emit('device_update', deviceStatus)
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (hvacClient && hvacClient.getDeviceId()) {
    socket.emit('connection_status', 'connected')
  } else {
    socket.emit('connection_status', 'disconnected')
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  socket.on('set_property', async (data) => {
    const { property, value } = data
    console.log(`üéõÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${property} = ${value}`)
    
    if (!hvacClient) {
      console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...')
      createHVACClient()
      
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(async () => {
        try {
          if (hvacClient && hvacClient.getDeviceId()) {
            await hvacClient.setProperty(property, value)
            console.log(`‚úÖ ${property} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ${value}`)
          } else {
            console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
            socket.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É' })
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${property}:`, error.message)
          socket.emit('error', { message: `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${property}` })
        }
      }, 3000)
      return
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ deviceId
      if (!hvacClient.getDeviceId()) {
        console.log('üîÑ –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...')
        await hvacClient.connect()
      }
      
      await hvacClient.setProperty(property, value)
      console.log(`‚úÖ ${property} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ${value}`)
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${property}:`, error.message)
      socket.emit('error', { message: `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${property}` })
    }
  })

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É
  socket.on('reconnect_hvac', () => {
    console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É...')
    if (hvacClient) {
      try {
        hvacClient.disconnect()
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error.message)
      }
    }
    setTimeout(() => {
      createHVACClient()
    }, 1000)
  })

  socket.on('disconnect', () => {
    console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id)
  })
})

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/status', (req, res) => {
  res.json({
    deviceStatus,
    hvacConnected: hvacClient && hvacClient.getDeviceId() ? true : false,
    deviceId: hvacClient ? hvacClient.getDeviceId() : null
  })
})

// –ü–æ–∏—Å–∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏
app.post('/api/scan-hvac', async (req, res) => {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤...')
    
    const foundDevices = []
    const dgram = await import('dgram')
    const socket = dgram.default.createSocket('udp4')
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–µ—Ç—å
    const { exec } = await import('child_process')
    const util = await import('util')
    const execAsync = util.promisify(exec)
    
    let baseIP = '192.168.31.' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try {
      const { stdout } = await execAsync('netstat -nr | grep default | head -1 | awk \'{print $2}\'')
      const gatewayIP = stdout.trim()
      if (gatewayIP && gatewayIP !== '') {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥—Å–µ—Ç—å –∏–∑ IP —à–ª—é–∑–∞
        const parts = gatewayIP.split('.')
        if (parts.length === 4) {
          baseIP = `${parts[0]}.${parts[1]}.${parts[2]}.`
          console.log(`üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–¥—Å–µ—Ç—å: ${baseIP}0/24`)
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Å–µ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    }
    
    socket.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ UDP —Å–æ–∫–µ—Ç–∞:', err.message)
      socket.close()
    })
    
    socket.on('message', (msg, rinfo) => {
      try {
        const message = msg.toString()
        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${rinfo.address}: ${message}`)
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤
        if (message.includes('mac') || 
            message.includes('device') || 
            message.includes('gree') ||
            message.includes('xiaomi') ||
            message.includes('mi') ||
            message.includes('ac') ||
            message.includes('hvac') ||
            message.includes('temperature') ||
            message.includes('power')) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: ${rinfo.address}:${rinfo.port}`)
          foundDevices.push({
            ip: rinfo.address,
            port: rinfo.port,
            timestamp: Date.now(),
            message: message.substring(0, 100) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          })
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    })
    
    socket.bind(() => {
      console.log('üöÄ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...')
      
      // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω IP –∞–¥—Ä–µ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–¥—Å–µ—Ç—å)
      for (let i = 1; i <= 254; i++) {
        const ip = baseIP + i
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        const messages = [
          Buffer.from('{"t": "scan"}'),
          Buffer.from('{"t": "pack"}'),
          Buffer.from('{"t": "bind"}'),
          Buffer.from('{"t": "control"}'),
          Buffer.from('{"pack": "scan"}'),
          Buffer.from('{"cmd": "scan"}'),
          Buffer.from('{"action": "discover"}')
        ]
        
        messages.forEach((message, index) => {
          setTimeout(() => {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã
            const ports = [7000, 7001, 7002, 54321, 54322, 54323]
            ports.forEach(port => {
              socket.send(message, port, ip, (err) => {
                if (err) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${ip}:${port}:`, err.message)
                }
              })
            })
          }, index * 100) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        })
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        socket.close()
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤: ${foundDevices.length}`)
        res.json({ 
          success: true, 
          devices: foundDevices,
          message: foundDevices.length > 0 ? '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã' : '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        })
      }, 20000)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error)
    res.status(500).json({ 
      success: false, 
      error: error.message 
    })
  }
})

app.post('/api/connect', (req, res) => {
  const { host } = req.body
  if (host) {
    // –†–∞–∑–±–∏—Ä–∞–µ–º host –∏ port
    if (host.includes(':')) {
      const [hostPart, portPart] = host.split(':')
      HVAC_CONFIG.host = hostPart
      HVAC_CONFIG.port = parseInt(portPart) || 7000
    } else {
      HVAC_CONFIG.host = host
      HVAC_CONFIG.port = 7000
    }
    console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É: ${HVAC_CONFIG.host}:${HVAC_CONFIG.port}`)
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
  createHVACClient()
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  setTimeout(() => {
    res.json({ 
      message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ',
      host: `${HVAC_CONFIG.host}:${HVAC_CONFIG.port}`
    })
  }, 1000)
})

app.post('/api/disconnect', (req, res) => {
  if (hvacClient) {
    try {
      hvacClient.disconnect()
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error.message)
    }
  }
  res.json({ message: '–û—Ç–∫–ª—é—á–µ–Ω–æ' })
})

// API endpoint –¥–ª—è –∫–æ–º–∞–Ω–¥ –æ—Ç –Ø–Ω–¥–µ–∫—Å –î–∏–∞–ª–æ–≥–æ–≤
app.post('/api/command', async (req, res) => {
  const { property, value } = req.body
  
  if (!property || value === undefined) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã property –∏–ª–∏ value' })
  }
  
  console.log(`üé§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞: ${property} = ${value}`)
  
  try {
    if (!hvacClient || !hvacClient.getDeviceId()) {
      console.log('üîÑ –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...')
      createHVACClient()
      
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 3000))
    }
    
    if (hvacClient && hvacClient.getDeviceId()) {
      await hvacClient.setProperty(property, value)
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${property} = ${value}`)
      res.json({ success: true, message: `–ö–æ–º–∞–Ω–¥–∞ ${property} = ${value} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞` })
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É')
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—É' })
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:`, error.message)
    res.status(500).json({ error: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}` })
  }
})

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
app.use(express.static('dist'))

const PORT = process.env.PORT || 3001

server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3000`)
  console.log(`üîß API: http://localhost:${PORT}/api`)
  console.log(`üè† –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: ${HVAC_CONFIG.host}:${HVAC_CONFIG.port}`)
  
  // –ù–µ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
})

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
  if (hvacClient) {
    hvacClient.disconnect()
  }
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    process.exit(0)
  })
}) 